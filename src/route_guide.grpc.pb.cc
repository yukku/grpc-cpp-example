// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto

#include "route_guide.pb.h"
#include "route_guide.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace routeguide {

static const char* RouteGuide_method_names[] = {
  "/routeguide.RouteGuide/GetNumber",
  "/routeguide.RouteGuide/GetString",
  "/routeguide.RouteGuide/GetFile",
};

std::unique_ptr< RouteGuide::Stub> RouteGuide::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RouteGuide::Stub> stub(new RouteGuide::Stub(channel));
  return stub;
}

RouteGuide::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetNumber_(RouteGuide_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetString_(RouteGuide_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFile_(RouteGuide_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RouteGuide::Stub::GetNumber(::grpc::ClientContext* context, const ::routeguide::Number& request, ::routeguide::Number* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNumber_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::routeguide::Number>* RouteGuide::Stub::AsyncGetNumberRaw(::grpc::ClientContext* context, const ::routeguide::Number& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::routeguide::Number>::Create(channel_.get(), cq, rpcmethod_GetNumber_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routeguide::Number>* RouteGuide::Stub::PrepareAsyncGetNumberRaw(::grpc::ClientContext* context, const ::routeguide::Number& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::routeguide::Number>::Create(channel_.get(), cq, rpcmethod_GetNumber_, context, request, false);
}

::grpc::Status RouteGuide::Stub::GetString(::grpc::ClientContext* context, const ::routeguide::String& request, ::routeguide::String* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetString_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::routeguide::String>* RouteGuide::Stub::AsyncGetStringRaw(::grpc::ClientContext* context, const ::routeguide::String& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::routeguide::String>::Create(channel_.get(), cq, rpcmethod_GetString_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routeguide::String>* RouteGuide::Stub::PrepareAsyncGetStringRaw(::grpc::ClientContext* context, const ::routeguide::String& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::routeguide::String>::Create(channel_.get(), cq, rpcmethod_GetString_, context, request, false);
}

::grpc::Status RouteGuide::Stub::GetFile(::grpc::ClientContext* context, const ::routeguide::File& request, ::routeguide::File* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFile_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::routeguide::File>* RouteGuide::Stub::AsyncGetFileRaw(::grpc::ClientContext* context, const ::routeguide::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::routeguide::File>::Create(channel_.get(), cq, rpcmethod_GetFile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routeguide::File>* RouteGuide::Stub::PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::routeguide::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::routeguide::File>::Create(channel_.get(), cq, rpcmethod_GetFile_, context, request, false);
}

RouteGuide::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteGuide_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RouteGuide::Service, ::routeguide::Number, ::routeguide::Number>(
          std::mem_fn(&RouteGuide::Service::GetNumber), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteGuide_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RouteGuide::Service, ::routeguide::String, ::routeguide::String>(
          std::mem_fn(&RouteGuide::Service::GetString), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteGuide_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RouteGuide::Service, ::routeguide::File, ::routeguide::File>(
          std::mem_fn(&RouteGuide::Service::GetFile), this)));
}

RouteGuide::Service::~Service() {
}

::grpc::Status RouteGuide::Service::GetNumber(::grpc::ServerContext* context, const ::routeguide::Number* request, ::routeguide::Number* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuide::Service::GetString(::grpc::ServerContext* context, const ::routeguide::String* request, ::routeguide::String* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuide::Service::GetFile(::grpc::ServerContext* context, const ::routeguide::File* request, ::routeguide::File* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace routeguide

