// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto
#ifndef GRPC_route_5fguide_2eproto__INCLUDED
#define GRPC_route_5fguide_2eproto__INCLUDED

#include "route_guide.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace routeguide {

class RouteGuide final {
 public:
  static constexpr char const* service_full_name() {
    return "routeguide.RouteGuide";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetNumber(::grpc::ClientContext* context, const ::routeguide::Number& request, ::routeguide::Number* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Number>> AsyncGetNumber(::grpc::ClientContext* context, const ::routeguide::Number& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Number>>(AsyncGetNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Number>> PrepareAsyncGetNumber(::grpc::ClientContext* context, const ::routeguide::Number& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Number>>(PrepareAsyncGetNumberRaw(context, request, cq));
    }
    virtual ::grpc::Status GetString(::grpc::ClientContext* context, const ::routeguide::String& request, ::routeguide::String* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::String>> AsyncGetString(::grpc::ClientContext* context, const ::routeguide::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::String>>(AsyncGetStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::String>> PrepareAsyncGetString(::grpc::ClientContext* context, const ::routeguide::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::String>>(PrepareAsyncGetStringRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFile(::grpc::ClientContext* context, const ::routeguide::File& request, ::routeguide::File* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::File>> AsyncGetFile(::grpc::ClientContext* context, const ::routeguide::File& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::File>>(AsyncGetFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::File>> PrepareAsyncGetFile(::grpc::ClientContext* context, const ::routeguide::File& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::File>>(PrepareAsyncGetFileRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Number>* AsyncGetNumberRaw(::grpc::ClientContext* context, const ::routeguide::Number& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Number>* PrepareAsyncGetNumberRaw(::grpc::ClientContext* context, const ::routeguide::Number& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::String>* AsyncGetStringRaw(::grpc::ClientContext* context, const ::routeguide::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::String>* PrepareAsyncGetStringRaw(::grpc::ClientContext* context, const ::routeguide::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::File>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::routeguide::File& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::File>* PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::routeguide::File& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetNumber(::grpc::ClientContext* context, const ::routeguide::Number& request, ::routeguide::Number* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Number>> AsyncGetNumber(::grpc::ClientContext* context, const ::routeguide::Number& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Number>>(AsyncGetNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Number>> PrepareAsyncGetNumber(::grpc::ClientContext* context, const ::routeguide::Number& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Number>>(PrepareAsyncGetNumberRaw(context, request, cq));
    }
    ::grpc::Status GetString(::grpc::ClientContext* context, const ::routeguide::String& request, ::routeguide::String* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::String>> AsyncGetString(::grpc::ClientContext* context, const ::routeguide::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::String>>(AsyncGetStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::String>> PrepareAsyncGetString(::grpc::ClientContext* context, const ::routeguide::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::String>>(PrepareAsyncGetStringRaw(context, request, cq));
    }
    ::grpc::Status GetFile(::grpc::ClientContext* context, const ::routeguide::File& request, ::routeguide::File* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::File>> AsyncGetFile(::grpc::ClientContext* context, const ::routeguide::File& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::File>>(AsyncGetFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::File>> PrepareAsyncGetFile(::grpc::ClientContext* context, const ::routeguide::File& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::File>>(PrepareAsyncGetFileRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::routeguide::Number>* AsyncGetNumberRaw(::grpc::ClientContext* context, const ::routeguide::Number& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::Number>* PrepareAsyncGetNumberRaw(::grpc::ClientContext* context, const ::routeguide::Number& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::String>* AsyncGetStringRaw(::grpc::ClientContext* context, const ::routeguide::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::String>* PrepareAsyncGetStringRaw(::grpc::ClientContext* context, const ::routeguide::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::File>* AsyncGetFileRaw(::grpc::ClientContext* context, const ::routeguide::File& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::File>* PrepareAsyncGetFileRaw(::grpc::ClientContext* context, const ::routeguide::File& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetNumber_;
    const ::grpc::internal::RpcMethod rpcmethod_GetString_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetNumber(::grpc::ServerContext* context, const ::routeguide::Number* request, ::routeguide::Number* response);
    virtual ::grpc::Status GetString(::grpc::ServerContext* context, const ::routeguide::String* request, ::routeguide::String* response);
    virtual ::grpc::Status GetFile(::grpc::ServerContext* context, const ::routeguide::File* request, ::routeguide::File* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNumber() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumber(::grpc::ServerContext* context, const ::routeguide::Number* request, ::routeguide::Number* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumber(::grpc::ServerContext* context, ::routeguide::Number* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::Number>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetString() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetString(::grpc::ServerContext* context, const ::routeguide::String* request, ::routeguide::String* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetString(::grpc::ServerContext* context, ::routeguide::String* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::String>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* context, const ::routeguide::File* request, ::routeguide::File* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFile(::grpc::ServerContext* context, ::routeguide::File* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::File>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetNumber<WithAsyncMethod_GetString<WithAsyncMethod_GetFile<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNumber() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumber(::grpc::ServerContext* context, const ::routeguide::Number* request, ::routeguide::Number* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetString() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetString(::grpc::ServerContext* context, const ::routeguide::String* request, ::routeguide::String* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* context, const ::routeguide::File* request, ::routeguide::File* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNumber() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::routeguide::Number, ::routeguide::Number>(std::bind(&WithStreamedUnaryMethod_GetNumber<BaseClass>::StreamedGetNumber, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNumber(::grpc::ServerContext* context, const ::routeguide::Number* request, ::routeguide::Number* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNumber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routeguide::Number,::routeguide::Number>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetString() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::routeguide::String, ::routeguide::String>(std::bind(&WithStreamedUnaryMethod_GetString<BaseClass>::StreamedGetString, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetString(::grpc::ServerContext* context, const ::routeguide::String* request, ::routeguide::String* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routeguide::String,::routeguide::String>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::routeguide::File, ::routeguide::File>(std::bind(&WithStreamedUnaryMethod_GetFile<BaseClass>::StreamedGetFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFile(::grpc::ServerContext* context, const ::routeguide::File* request, ::routeguide::File* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routeguide::File,::routeguide::File>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetNumber<WithStreamedUnaryMethod_GetString<WithStreamedUnaryMethod_GetFile<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetNumber<WithStreamedUnaryMethod_GetString<WithStreamedUnaryMethod_GetFile<Service > > > StreamedService;
};

}  // namespace routeguide


#endif  // GRPC_route_5fguide_2eproto__INCLUDED
